/*
 * ADP APIs
 * ADP API endpoints.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HrApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HrApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HrApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkAsyncRequestStatusCall(String key, String $select, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/core/v1/operations/workerInformationManagement/hr.v2.workers/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAsyncRequestStatusValidateBeforeCall(String key, String $select, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling checkAsyncRequestStatus(Async)");
        }

        return checkAsyncRequestStatusCall(key, $select, body, _callback);

    }


    private ApiResponse<Void> checkAsyncRequestStatusWithHttpInfo(String key, String $select, Object body) throws ApiException {
        okhttp3.Call localVarCall = checkAsyncRequestStatusValidateBeforeCall(key, $select, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkAsyncRequestStatusAsync(String key, String $select, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAsyncRequestStatusValidateBeforeCall(key, $select, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckAsyncRequestStatusRequestBuilder {
        private final String key;
        private String $select;
        private Object body;

        private CheckAsyncRequestStatusRequestBuilder(String key) {
            this.key = key;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CheckAsyncRequestStatusRequestBuilder
         */
        public CheckAsyncRequestStatusRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set $select
         * @param $select  (optional)
         * @return CheckAsyncRequestStatusRequestBuilder
         */
        public CheckAsyncRequestStatusRequestBuilder $select(String $select) {
            this.$select = $select;
            return this;
        }
        
        /**
         * Build call for checkAsyncRequestStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return checkAsyncRequestStatusCall(key, $select, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute checkAsyncRequestStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Object body = buildBodyParams();
            checkAsyncRequestStatusWithHttpInfo(key, $select, body);
        }

        /**
         * Execute checkAsyncRequestStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return checkAsyncRequestStatusWithHttpInfo(key, $select, body);
        }

        /**
         * Execute checkAsyncRequestStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Object body = buildBodyParams();
            return checkAsyncRequestStatusAsync(key, $select, body, _callback);
        }
    }

    /**
     * Worker V2 (Check Async Request Status)
     * Check the status of an async request to the Worker API given the key returned as part of the original asyn response&#39;s \&quot;link\&quot; header.
     * @param key  (required)
     * @return CheckAsyncRequestStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CheckAsyncRequestStatusRequestBuilder checkAsyncRequestStatus(String key) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        return new CheckAsyncRequestStatusRequestBuilder(key);
    }
    private okhttp3.Call getWorkerByAoidCall(String anthonyAlbrightAoid, String preventCache, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/hr/v2/workers/{anthony-albright-aoid}"
            .replace("{" + "anthony-albright-aoid" + "}", localVarApiClient.escapeString(anthonyAlbrightAoid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preventCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preventCache", preventCache));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerByAoidValidateBeforeCall(String anthonyAlbrightAoid, String preventCache, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'anthonyAlbrightAoid' is set
        if (anthonyAlbrightAoid == null) {
            throw new ApiException("Missing the required parameter 'anthonyAlbrightAoid' when calling getWorkerByAoid(Async)");
        }

        return getWorkerByAoidCall(anthonyAlbrightAoid, preventCache, body, _callback);

    }


    private ApiResponse<Void> getWorkerByAoidWithHttpInfo(String anthonyAlbrightAoid, String preventCache, Object body) throws ApiException {
        okhttp3.Call localVarCall = getWorkerByAoidValidateBeforeCall(anthonyAlbrightAoid, preventCache, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getWorkerByAoidAsync(String anthonyAlbrightAoid, String preventCache, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerByAoidValidateBeforeCall(anthonyAlbrightAoid, preventCache, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetWorkerByAoidRequestBuilder {
        private final String anthonyAlbrightAoid;
        private String preventCache;
        private Object body;

        private GetWorkerByAoidRequestBuilder(String anthonyAlbrightAoid) {
            this.anthonyAlbrightAoid = anthonyAlbrightAoid;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return GetWorkerByAoidRequestBuilder
         */
        public GetWorkerByAoidRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set preventCache
         * @param preventCache  (optional)
         * @return GetWorkerByAoidRequestBuilder
         */
        public GetWorkerByAoidRequestBuilder preventCache(String preventCache) {
            this.preventCache = preventCache;
            return this;
        }
        
        /**
         * Build call for getWorkerByAoid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return getWorkerByAoidCall(anthonyAlbrightAoid, preventCache, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute getWorkerByAoid request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Object body = buildBodyParams();
            getWorkerByAoidWithHttpInfo(anthonyAlbrightAoid, preventCache, body);
        }

        /**
         * Execute getWorkerByAoid request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return getWorkerByAoidWithHttpInfo(anthonyAlbrightAoid, preventCache, body);
        }

        /**
         * Execute getWorkerByAoid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Object body = buildBodyParams();
            return getWorkerByAoidAsync(anthonyAlbrightAoid, preventCache, body, _callback);
        }
    }

    /**
     * Worker V2 (Single by AOID)
     * Request a single worker given their AOID.
     * @param anthonyAlbrightAoid  (required)
     * @return GetWorkerByAoidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkerByAoidRequestBuilder getWorkerByAoid(String anthonyAlbrightAoid) throws IllegalArgumentException {
        if (anthonyAlbrightAoid == null) throw new IllegalArgumentException("\"anthonyAlbrightAoid\" is required but got null");
            

        return new GetWorkerByAoidRequestBuilder(anthonyAlbrightAoid);
    }
    private okhttp3.Call getWorkerDemographicsByAoidCall(String anthonyAlbrightAoid, String preventCache, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/hr/v2/worker-demographics/{anthony-albright-aoid}"
            .replace("{" + "anthony-albright-aoid" + "}", localVarApiClient.escapeString(anthonyAlbrightAoid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preventCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preventCache", preventCache));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkerDemographicsByAoidValidateBeforeCall(String anthonyAlbrightAoid, String preventCache, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'anthonyAlbrightAoid' is set
        if (anthonyAlbrightAoid == null) {
            throw new ApiException("Missing the required parameter 'anthonyAlbrightAoid' when calling getWorkerDemographicsByAoid(Async)");
        }

        return getWorkerDemographicsByAoidCall(anthonyAlbrightAoid, preventCache, body, _callback);

    }


    private ApiResponse<Void> getWorkerDemographicsByAoidWithHttpInfo(String anthonyAlbrightAoid, String preventCache, Object body) throws ApiException {
        okhttp3.Call localVarCall = getWorkerDemographicsByAoidValidateBeforeCall(anthonyAlbrightAoid, preventCache, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getWorkerDemographicsByAoidAsync(String anthonyAlbrightAoid, String preventCache, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkerDemographicsByAoidValidateBeforeCall(anthonyAlbrightAoid, preventCache, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetWorkerDemographicsByAoidRequestBuilder {
        private final String anthonyAlbrightAoid;
        private String preventCache;
        private Object body;

        private GetWorkerDemographicsByAoidRequestBuilder(String anthonyAlbrightAoid) {
            this.anthonyAlbrightAoid = anthonyAlbrightAoid;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return GetWorkerDemographicsByAoidRequestBuilder
         */
        public GetWorkerDemographicsByAoidRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set preventCache
         * @param preventCache  (optional)
         * @return GetWorkerDemographicsByAoidRequestBuilder
         */
        public GetWorkerDemographicsByAoidRequestBuilder preventCache(String preventCache) {
            this.preventCache = preventCache;
            return this;
        }
        
        /**
         * Build call for getWorkerDemographicsByAoid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return getWorkerDemographicsByAoidCall(anthonyAlbrightAoid, preventCache, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute getWorkerDemographicsByAoid request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Object body = buildBodyParams();
            getWorkerDemographicsByAoidWithHttpInfo(anthonyAlbrightAoid, preventCache, body);
        }

        /**
         * Execute getWorkerDemographicsByAoid request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return getWorkerDemographicsByAoidWithHttpInfo(anthonyAlbrightAoid, preventCache, body);
        }

        /**
         * Execute getWorkerDemographicsByAoid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Object body = buildBodyParams();
            return getWorkerDemographicsByAoidAsync(anthonyAlbrightAoid, preventCache, body, _callback);
        }
    }

    /**
     * Worker Demographics V2 (Single by AOID)
     * Request demographic data for a single worker given their AOID.
     * @param anthonyAlbrightAoid  (required)
     * @return GetWorkerDemographicsByAoidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkerDemographicsByAoidRequestBuilder getWorkerDemographicsByAoid(String anthonyAlbrightAoid) throws IllegalArgumentException {
        if (anthonyAlbrightAoid == null) throw new IllegalArgumentException("\"anthonyAlbrightAoid\" is required but got null");
            

        return new GetWorkerDemographicsByAoidRequestBuilder(anthonyAlbrightAoid);
    }
    private okhttp3.Call listTop5PreventCacheCall(String $top, String preventCache, String $filter, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/hr/v2/workers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (preventCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preventCache", preventCache));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTop5PreventCacheValidateBeforeCall(String $top, String preventCache, String $filter, Object body, final ApiCallback _callback) throws ApiException {
        return listTop5PreventCacheCall($top, preventCache, $filter, body, _callback);

    }


    private ApiResponse<Void> listTop5PreventCacheWithHttpInfo(String $top, String preventCache, String $filter, Object body) throws ApiException {
        okhttp3.Call localVarCall = listTop5PreventCacheValidateBeforeCall($top, preventCache, $filter, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listTop5PreventCacheAsync(String $top, String preventCache, String $filter, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTop5PreventCacheValidateBeforeCall($top, preventCache, $filter, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListTop5PreventCacheRequestBuilder {
        private String $top;
        private String preventCache;
        private String $filter;
        private Object body;

        private ListTop5PreventCacheRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return ListTop5PreventCacheRequestBuilder
         */
        public ListTop5PreventCacheRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set $top
         * @param $top  (optional)
         * @return ListTop5PreventCacheRequestBuilder
         */
        public ListTop5PreventCacheRequestBuilder $top(String $top) {
            this.$top = $top;
            return this;
        }
        
        /**
         * Set preventCache
         * @param preventCache  (optional)
         * @return ListTop5PreventCacheRequestBuilder
         */
        public ListTop5PreventCacheRequestBuilder preventCache(String preventCache) {
            this.preventCache = preventCache;
            return this;
        }
        
        /**
         * Set $filter
         * @param $filter  (optional)
         * @return ListTop5PreventCacheRequestBuilder
         */
        public ListTop5PreventCacheRequestBuilder $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }
        
        /**
         * Build call for listTop5PreventCache
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return listTop5PreventCacheCall($top, preventCache, $filter, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute listTop5PreventCache request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Object body = buildBodyParams();
            listTop5PreventCacheWithHttpInfo($top, preventCache, $filter, body);
        }

        /**
         * Execute listTop5PreventCache request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return listTop5PreventCacheWithHttpInfo($top, preventCache, $filter, body);
        }

        /**
         * Execute listTop5PreventCache request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Object body = buildBodyParams();
            return listTop5PreventCacheAsync($top, preventCache, $filter, body, _callback);
        }
    }

    /**
     * Worker V2 (List with Top 5 and Prevent Cache)
     * Request a collection of the top 5 workers using a URI cache-buster.
     * @return ListTop5PreventCacheRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListTop5PreventCacheRequestBuilder listTop5PreventCache() throws IllegalArgumentException {
        return new ListTop5PreventCacheRequestBuilder();
    }
    private okhttp3.Call listTop5PreventCache_0Call(String $top, String preventCache, String $filter, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/hr/v2/worker-demographics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (preventCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preventCache", preventCache));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTop5PreventCache_0ValidateBeforeCall(String $top, String preventCache, String $filter, Object body, final ApiCallback _callback) throws ApiException {
        return listTop5PreventCache_0Call($top, preventCache, $filter, body, _callback);

    }


    private ApiResponse<Void> listTop5PreventCache_0WithHttpInfo(String $top, String preventCache, String $filter, Object body) throws ApiException {
        okhttp3.Call localVarCall = listTop5PreventCache_0ValidateBeforeCall($top, preventCache, $filter, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listTop5PreventCache_0Async(String $top, String preventCache, String $filter, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTop5PreventCache_0ValidateBeforeCall($top, preventCache, $filter, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListTop5PreventCache0RequestBuilder {
        private String $top;
        private String preventCache;
        private String $filter;
        private Object body;

        private ListTop5PreventCache0RequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return ListTop5PreventCache0RequestBuilder
         */
        public ListTop5PreventCache0RequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set $top
         * @param $top  (optional)
         * @return ListTop5PreventCache0RequestBuilder
         */
        public ListTop5PreventCache0RequestBuilder $top(String $top) {
            this.$top = $top;
            return this;
        }
        
        /**
         * Set preventCache
         * @param preventCache  (optional)
         * @return ListTop5PreventCache0RequestBuilder
         */
        public ListTop5PreventCache0RequestBuilder preventCache(String preventCache) {
            this.preventCache = preventCache;
            return this;
        }
        
        /**
         * Set $filter
         * @param $filter  (optional)
         * @return ListTop5PreventCache0RequestBuilder
         */
        public ListTop5PreventCache0RequestBuilder $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }
        
        /**
         * Build call for listTop5PreventCache_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return listTop5PreventCache_0Call($top, preventCache, $filter, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute listTop5PreventCache_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Object body = buildBodyParams();
            listTop5PreventCache_0WithHttpInfo($top, preventCache, $filter, body);
        }

        /**
         * Execute listTop5PreventCache_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return listTop5PreventCache_0WithHttpInfo($top, preventCache, $filter, body);
        }

        /**
         * Execute listTop5PreventCache_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Object body = buildBodyParams();
            return listTop5PreventCache_0Async($top, preventCache, $filter, body, _callback);
        }
    }

    /**
     * Worker Demographics V2 (List with Top 5 and Prevent Cache)
     * Request demographic data for a collection of the top 5 workers using a URI cache-buster.
     * @return ListTop5PreventCache0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListTop5PreventCache0RequestBuilder listTop5PreventCache_0() throws IllegalArgumentException {
        return new ListTop5PreventCache0RequestBuilder();
    }
}
